// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpcwxgroupmembers.proto

// 定义包名

package grpcwxgroupmembers

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// 定义 Req 消息结构
type Sql struct {
	// 类型 字段 = 标识号
	Where                string   `protobuf:"bytes,1,opt,name=Where,proto3" json:"Where,omitempty"`
	Select               string   `protobuf:"bytes,2,opt,name=Select,proto3" json:"Select,omitempty"`
	GroupBy              string   `protobuf:"bytes,3,opt,name=GroupBy,proto3" json:"GroupBy,omitempty"`
	OrderBy              string   `protobuf:"bytes,4,opt,name=OrderBy,proto3" json:"OrderBy,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Sql) Reset()         { *m = Sql{} }
func (m *Sql) String() string { return proto.CompactTextString(m) }
func (*Sql) ProtoMessage()    {}
func (*Sql) Descriptor() ([]byte, []int) {
	return fileDescriptor_50b77da89bba893c, []int{0}
}

func (m *Sql) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Sql.Unmarshal(m, b)
}
func (m *Sql) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Sql.Marshal(b, m, deterministic)
}
func (m *Sql) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sql.Merge(m, src)
}
func (m *Sql) XXX_Size() int {
	return xxx_messageInfo_Sql.Size(m)
}
func (m *Sql) XXX_DiscardUnknown() {
	xxx_messageInfo_Sql.DiscardUnknown(m)
}

var xxx_messageInfo_Sql proto.InternalMessageInfo

func (m *Sql) GetWhere() string {
	if m != nil {
		return m.Where
	}
	return ""
}

func (m *Sql) GetSelect() string {
	if m != nil {
		return m.Select
	}
	return ""
}

func (m *Sql) GetGroupBy() string {
	if m != nil {
		return m.GroupBy
	}
	return ""
}

func (m *Sql) GetOrderBy() string {
	if m != nil {
		return m.OrderBy
	}
	return ""
}

// 定义 Res 消息结构
type Res struct {
	Rows                 string   `protobuf:"bytes,1,opt,name=rows,proto3" json:"rows,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Res) Reset()         { *m = Res{} }
func (m *Res) String() string { return proto.CompactTextString(m) }
func (*Res) ProtoMessage()    {}
func (*Res) Descriptor() ([]byte, []int) {
	return fileDescriptor_50b77da89bba893c, []int{1}
}

func (m *Res) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Res.Unmarshal(m, b)
}
func (m *Res) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Res.Marshal(b, m, deterministic)
}
func (m *Res) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Res.Merge(m, src)
}
func (m *Res) XXX_Size() int {
	return xxx_messageInfo_Res.Size(m)
}
func (m *Res) XXX_DiscardUnknown() {
	xxx_messageInfo_Res.DiscardUnknown(m)
}

var xxx_messageInfo_Res proto.InternalMessageInfo

func (m *Res) GetRows() string {
	if m != nil {
		return m.Rows
	}
	return ""
}

func init() {
	proto.RegisterType((*Sql)(nil), "grpcwxgroupmembers.Sql")
	proto.RegisterType((*Res)(nil), "grpcwxgroupmembers.Res")
}

func init() { proto.RegisterFile("grpcwxgroupmembers.proto", fileDescriptor_50b77da89bba893c) }

var fileDescriptor_50b77da89bba893c = []byte{
	// 176 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x8f, 0x3d, 0x0f, 0x82, 0x50,
	0x0c, 0x45, 0x45, 0x3e, 0x8c, 0x1d, 0x1b, 0xa3, 0xd5, 0xc9, 0x30, 0x39, 0x31, 0xe8, 0xea, 0x44,
	0x62, 0x1c, 0x8d, 0x30, 0xb8, 0x83, 0x0d, 0x0e, 0x90, 0x07, 0x7d, 0x10, 0xe4, 0xdf, 0x1b, 0x1e,
	0x30, 0xc9, 0xd6, 0xd3, 0x93, 0xdc, 0x9b, 0x0b, 0x94, 0x49, 0x99, 0xb6, 0xdf, 0x4c, 0x54, 0x53,
	0x16, 0x5c, 0x24, 0x2c, 0x3a, 0x28, 0x45, 0xd5, 0x0a, 0xf1, 0xdf, 0xf8, 0x19, 0xd8, 0x71, 0x95,
	0xe3, 0x06, 0xdc, 0xd7, 0x87, 0x85, 0xc9, 0x3a, 0x5a, 0xa7, 0x75, 0x34, 0x00, 0x6e, 0xc1, 0x8b,
	0x39, 0xe7, 0xb4, 0xa6, 0xa5, 0x79, 0x8f, 0x84, 0x04, 0xab, 0x7b, 0x1f, 0x12, 0x76, 0x64, 0x1b,
	0x31, 0x61, 0x6f, 0x1e, 0xf2, 0x66, 0x09, 0x3b, 0x72, 0x06, 0x33, 0xa2, 0xbf, 0x07, 0x3b, 0x62,
	0x8d, 0x08, 0x8e, 0xa8, 0x56, 0x8f, 0x3d, 0xe6, 0x3e, 0xdf, 0xc0, 0x7d, 0x36, 0x2c, 0x1d, 0x5e,
	0xa7, 0x3e, 0xdc, 0x05, 0x33, 0x2b, 0xe2, 0x2a, 0x3f, 0xcc, 0x8a, 0x88, 0xb5, 0xbf, 0x48, 0x3c,
	0xb3, 0xf2, 0xf2, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x41, 0x81, 0xad, 0x48, 0x01, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// 定义接口 (结构体可以复用)
	// 方法 (请求消息结构体) returns (返回消息结构体) {}
	Select(ctx context.Context, in *Sql, opts ...grpc.CallOption) (*Res, error)
}

type queryClient struct {
	cc *grpc.ClientConn
}

func NewQueryClient(cc *grpc.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Select(ctx context.Context, in *Sql, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/grpcwxgroupmembers.Query/Select", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// 定义接口 (结构体可以复用)
	// 方法 (请求消息结构体) returns (返回消息结构体) {}
	Select(context.Context, *Sql) (*Res, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Select(ctx context.Context, req *Sql) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Select not implemented")
}

func RegisterQueryServer(s *grpc.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Select_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Sql)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Select(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcwxgroupmembers.Query/Select",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Select(ctx, req.(*Sql))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpcwxgroupmembers.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Select",
			Handler:    _Query_Select_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpcwxgroupmembers.proto",
}
