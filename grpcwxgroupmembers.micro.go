// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: grpcwxgroupmembers.proto

// 定义包名

package wxzs_contact_rpc

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Query service

type QueryService interface {
	// 返回的结构体都有一个Code的key，值为0则正常，非0就需要排查问题程序报错
	SelectGroupMembers(ctx context.Context, in *SelectGroupMembersOrm, opts ...client.CallOption) (*SelectGroupMembersRes, error)
	SelectGroupIds(ctx context.Context, in *SelectGroupIdsOrm, opts ...client.CallOption) (*SelectGroupIdsRes, error)
	UpdateGroupMembers(ctx context.Context, in *UpdateGroupMembersOrm, opts ...client.CallOption) (*UpdateGroupMembersRes, error)
	InsertGroupMembers(ctx context.Context, in *InsertGroupMembersOrm, opts ...client.CallOption) (*InsertGroupMembersRes, error)
	DeleteGroupContact(ctx context.Context, in *DeleteGroupContactOrm, opts ...client.CallOption) (*DeleteGroupContactRes, error)
	InsertGroupContact(ctx context.Context, in *InsertGroupContactOrm, opts ...client.CallOption) (*InsertGroupContactRes, error)
}

type queryService struct {
	c    client.Client
	name string
}

func NewQueryService(name string, c client.Client) QueryService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "wxzs.contact.rpc"
	}
	return &queryService{
		c:    c,
		name: name,
	}
}

func (c *queryService) SelectGroupMembers(ctx context.Context, in *SelectGroupMembersOrm, opts ...client.CallOption) (*SelectGroupMembersRes, error) {
	req := c.c.NewRequest(c.name, "Query.SelectGroupMembers", in)
	out := new(SelectGroupMembersRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryService) SelectGroupIds(ctx context.Context, in *SelectGroupIdsOrm, opts ...client.CallOption) (*SelectGroupIdsRes, error) {
	req := c.c.NewRequest(c.name, "Query.SelectGroupIds", in)
	out := new(SelectGroupIdsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryService) UpdateGroupMembers(ctx context.Context, in *UpdateGroupMembersOrm, opts ...client.CallOption) (*UpdateGroupMembersRes, error) {
	req := c.c.NewRequest(c.name, "Query.UpdateGroupMembers", in)
	out := new(UpdateGroupMembersRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryService) InsertGroupMembers(ctx context.Context, in *InsertGroupMembersOrm, opts ...client.CallOption) (*InsertGroupMembersRes, error) {
	req := c.c.NewRequest(c.name, "Query.InsertGroupMembers", in)
	out := new(InsertGroupMembersRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryService) DeleteGroupContact(ctx context.Context, in *DeleteGroupContactOrm, opts ...client.CallOption) (*DeleteGroupContactRes, error) {
	req := c.c.NewRequest(c.name, "Query.DeleteGroupContact", in)
	out := new(DeleteGroupContactRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryService) InsertGroupContact(ctx context.Context, in *InsertGroupContactOrm, opts ...client.CallOption) (*InsertGroupContactRes, error) {
	req := c.c.NewRequest(c.name, "Query.InsertGroupContact", in)
	out := new(InsertGroupContactRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Query service

type QueryHandler interface {
	// 返回的结构体都有一个Code的key，值为0则正常，非0就需要排查问题程序报错
	SelectGroupMembers(context.Context, *SelectGroupMembersOrm, *SelectGroupMembersRes) error
	SelectGroupIds(context.Context, *SelectGroupIdsOrm, *SelectGroupIdsRes) error
	UpdateGroupMembers(context.Context, *UpdateGroupMembersOrm, *UpdateGroupMembersRes) error
	InsertGroupMembers(context.Context, *InsertGroupMembersOrm, *InsertGroupMembersRes) error
	DeleteGroupContact(context.Context, *DeleteGroupContactOrm, *DeleteGroupContactRes) error
	InsertGroupContact(context.Context, *InsertGroupContactOrm, *InsertGroupContactRes) error
}

func RegisterQueryHandler(s server.Server, hdlr QueryHandler, opts ...server.HandlerOption) error {
	type query interface {
		SelectGroupMembers(ctx context.Context, in *SelectGroupMembersOrm, out *SelectGroupMembersRes) error
		SelectGroupIds(ctx context.Context, in *SelectGroupIdsOrm, out *SelectGroupIdsRes) error
		UpdateGroupMembers(ctx context.Context, in *UpdateGroupMembersOrm, out *UpdateGroupMembersRes) error
		InsertGroupMembers(ctx context.Context, in *InsertGroupMembersOrm, out *InsertGroupMembersRes) error
		DeleteGroupContact(ctx context.Context, in *DeleteGroupContactOrm, out *DeleteGroupContactRes) error
		InsertGroupContact(ctx context.Context, in *InsertGroupContactOrm, out *InsertGroupContactRes) error
	}
	type Query struct {
		query
	}
	h := &queryHandler{hdlr}
	return s.Handle(s.NewHandler(&Query{h}, opts...))
}

type queryHandler struct {
	QueryHandler
}

func (h *queryHandler) SelectGroupMembers(ctx context.Context, in *SelectGroupMembersOrm, out *SelectGroupMembersRes) error {
	return h.QueryHandler.SelectGroupMembers(ctx, in, out)
}

func (h *queryHandler) SelectGroupIds(ctx context.Context, in *SelectGroupIdsOrm, out *SelectGroupIdsRes) error {
	return h.QueryHandler.SelectGroupIds(ctx, in, out)
}

func (h *queryHandler) UpdateGroupMembers(ctx context.Context, in *UpdateGroupMembersOrm, out *UpdateGroupMembersRes) error {
	return h.QueryHandler.UpdateGroupMembers(ctx, in, out)
}

func (h *queryHandler) InsertGroupMembers(ctx context.Context, in *InsertGroupMembersOrm, out *InsertGroupMembersRes) error {
	return h.QueryHandler.InsertGroupMembers(ctx, in, out)
}

func (h *queryHandler) DeleteGroupContact(ctx context.Context, in *DeleteGroupContactOrm, out *DeleteGroupContactRes) error {
	return h.QueryHandler.DeleteGroupContact(ctx, in, out)
}

func (h *queryHandler) InsertGroupContact(ctx context.Context, in *InsertGroupContactOrm, out *InsertGroupContactRes) error {
	return h.QueryHandler.InsertGroupContact(ctx, in, out)
}
